package com.xerox.controller;

import java.security.Principal;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.xerox.entity.Bill;
import com.xerox.entity.User;
import com.xerox.entity.XeroxMachine;
import com.xerox.repository.BillRepository;
import com.xerox.repository.UserRepository;
import com.xerox.repository.XeroxMachineRepository;
@RestController
@RequestMapping("/api/owner")
public class OwnerController {
	
	  @Autowired
	    private UserRepository userRepository;

	    @Autowired
	    private XeroxMachineRepository xeroxMachineRepository;

	    @Autowired
	    private BillRepository billRepository;

	    @Autowired
	    private PasswordEncoder passwordEncoder;

	    /**
	     * Adds a new rental user.
	     */
	    @PostMapping("/rentals")
	    public ResponseEntity<?> addRental(@RequestBody AdminController.UserRequest request, Principal principal) {
	        User owner = userRepository.findByUsername(principal.getName()).orElse(null);
	        if (owner == null) {
	            return ResponseEntity.status(401).body(Map.of("error", "Unauthorized"));
	        }
	        if (userRepository.findByUsername(request.getUsername()).isPresent()) {
	            return ResponseEntity.badRequest().body(Map.of("error", "Username exists"));
	        }
	        User rental = new User();
	        rental.setUsername(request.getUsername());
	        rental.setPassword(passwordEncoder.encode(request.getPassword()));
	        rental.setEmail(request.getEmail());
	        rental.setRole("ROLE_RENTAL");
	        rental.setCreatedBy(owner);
	        userRepository.save(rental);
	        return ResponseEntity.ok(Map.of("message", "Rental added"));
	    }

	    /**
	     * Adds a new Xerox machine for a rental.
	     */
	    @PostMapping("/machines")
	    public ResponseEntity<?> addMachine(@RequestBody MachineRequest request, Principal principal) {
	        User owner = userRepository.findByUsername(principal.getName()).orElse(null);
	        User rental = userRepository.findById(request.getRentalId()).orElse(null);
	        if (owner == null || rental == null || !rental.getRole().equals("ROLE_RENTAL")) {
	            return ResponseEntity.badRequest().body(Map.of("error", "Invalid request"));
	        }
	        XeroxMachine machine = new XeroxMachine();
	        machine.setModel(request.getModel());
	        machine.setRental(rental);
	        machine.setOwner(owner);
	        machine.setStatus("Active");
	        xeroxMachineRepository.save(machine);
	        return ResponseEntity.ok(Map.of("message", "Machine added"));
	    }

	    /**
	     * Generates a bill for a rental.
	     */
	    @PostMapping("/bills")
	    public ResponseEntity<?> generateBill(@RequestBody BillRequest request, Principal principal) {
	        User owner = userRepository.findByUsername(principal.getName()).orElse(null);
	        User rental = userRepository.findById(request.getRentalId()).orElse(null);
	        if (owner == null || rental == null || !rental.getRole().equals("ROLE_RENTAL")) {
	            return ResponseEntity.badRequest().body(Map.of("error", "Invalid request"));
	        }
	        Bill bill = new Bill();
	        bill.setRental(rental);
	        bill.setOwner(owner);
	        bill.setAmount(request.getAmount());
	        bill.setDate(LocalDate.now());
	        bill.setStatus("Pending");
	        billRepository.save(bill);
	        return ResponseEntity.ok(Map.of("message", "Bill generated"));
	    }

	    /**
	     * Lists all machines owned by the owner.
	     */
	    @GetMapping("/machines")
	    public ResponseEntity<List<XeroxMachine>> getMachines(Principal principal) {
	        User owner = userRepository.findByUsername(principal.getName()).orElse(null);
	        if (owner == null) {
	            return ResponseEntity.status(401).build();
	        }
	        return ResponseEntity.ok(xeroxMachineRepository.findByOwnerId(owner.getId()));
	    }

	    /**
	     * Lists all bills generated by the owner.
	     */
	    @GetMapping("/bills")
	    public ResponseEntity<List<Bill>> getBills(Principal principal) {
	        User owner = userRepository.findByUsername(principal.getName()).orElse(null);
	        if (owner == null) {
	            return ResponseEntity.status(401).build();
	        }
	        return ResponseEntity.ok(billRepository.findByOwnerId(owner.getId()));
	    }

	    public static class MachineRequest {
	        private String model;
	        private Long rentalId;

	        public String getModel() { return model; }
	        public void setModel(String model) { this.model = model; }
	        public Long getRentalId() { return rentalId; }
	        public void setRentalId(Long rentalId) { this.rentalId = rentalId; }
	    }

	    public static class BillRequest {
	        private Long rentalId;
	        private Double amount;

	        public Long getRentalId() { return rentalId; }
	        public void setRentalId(Long rentalId) { this.rentalId = rentalId; }
	        public Double getAmount() { return amount; }
	        public void setAmount(Double amount) { this.amount = amount; }
	    }

}
